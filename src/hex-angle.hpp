#include <cstdint>

struct HexAngle {
    uint8_t hex = 0x00;

    inline bool isRotatable() const { return (hex != 0xFF); }

    inline float degrees() const { return ((256.0f - hex) / 256.0f) * 360.0f; }

    static HexAngle fromDegrees(float degAng) {
        return HexAngle{(uint8_t)(((360 - degAng) / 360) * 256)};
    }

    inline bool inRange(uint8_t l, uint8_t r) {
        return hex >= l && hex <= r;
    }

    inline static float sin(HexAngle angle) {
	    return (float)hexsin(angle) / 256.0f;
    }

    inline static float cos(HexAngle angle) {
	    return (float)hexcos(angle) / 256.0f;
    }

    inline static int hexsin(HexAngle angle) {
	    return SINCOSLIST[angle.hex % 256];
    }

    inline static int hexcos(HexAngle angle) {
	    return SINCOSLIST[(angle.hex + 64) % 256];
    }

private:
    static constexpr int SINCOSLIST[] = { 
        0,6,12,18,25,31,37,43,49,56,62,68,74,80,86,92,97,103,109,115,120,126,131,136,142,147,152,157,162,167,171,176,181,185,189,193,197,201,205,209,212,216,219,222,225,228,231,234,236,238,241,243,244,246,248,249,251,252,253,254,254,255,255,255,
        256,255,255,255,254,254,253,252,251,249,248,246,244,243,241,238,236,234,231,228,225,222,219,216,212,209,205,201,197,193,189,185,181,176,171,167,162,157,152,147,142,136,131,126,120,115,109,103,97,92,86,80,74,68,62,56,49,43,37,31,25,18,12,6,
        0,-6,-12,-18,-25,-31,-37,-43,-49,-56,-62,-68,-74,-80,-86,-92,-97,-103,-109,-115,-120,-126,-131,-136,-142,-147,-152,-157,-162,-167,-171,-176,-181,-185,-189,-193,-197,-201,-205,-209,-212,-216,-219,-222,-225,-228,-231,-234,-236,-238,-241,-243,-244,-246,-248,-249,-251,-252,-253,-254,-254,-255,-255,-255,
        -256,-255,-255,-255,-254,-254,-253,-252,-251,-249,-248,-246,-244,-243,-241,-238,-236,-234,-231,-228,-225,-222,-219,-216,-212,-209,-205,-201,-197,-193,-189,-185,-181,-176,-171,-167,-162,-157,-152,-147,-142,-136,-131,-126,-120,-115,-109,-103,-97,-92,-86,-80,-74,-68,-62,-56,-49,-43,-37,-31,-25,-18,-12,-6 
    }; 

    
};
